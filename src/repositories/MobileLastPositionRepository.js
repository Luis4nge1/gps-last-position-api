import { createRedisClient } from '../config/redis.js';
import { logger } from '../utils/logger.js';
import { config } from '../config/env.js';

/**
 * Repositorio para consultas de √∫ltima posici√≥n m√≥vil desde Redis
 * Usa el prefijo mobile:last: en lugar de gps:last:
 */
export class MobileLastPositionRepository {
  constructor() {
    this.client = null;
    this.isConnected = false;
    this.keyPrefix = 'mobile:last:'; // Prefijo espec√≠fico para datos m√≥viles
  }

  /**
   * Conecta a Redis
   */
  async connect() {
    try {
      if (!this.client) {
        this.client = createRedisClient();
      }

      if (this.client.status === 'ready') {
        this.isConnected = true;
        return this.client;
      }

      if (!this.isConnected && this.client.status !== 'connecting') {
        await this.client.connect();
        this.isConnected = true;
        logger.info('‚úÖ Conectado a Redis para consultas m√≥viles');
      }

      return this.client;
    } catch (error) {
      if (error.message.includes('already connecting') || error.message.includes('already connected')) {
        logger.debug('üîó Redis ya est√° conectado, reutilizando conexi√≥n');
        this.isConnected = true;
        return this.client;
      }
      
      logger.error('‚ùå Error conectando a Redis para m√≥viles:', error.message);
      throw error;
    }
  }

  /**
   * Obtiene datos de una clave seg√∫n su tipo
   * @param {string} key - Clave de Redis
   * @param {string} userId - ID del usuario
   * @returns {Object|null} Datos procesados o null
   */
  async getDataByType(key, userId) {
    const dataType = await this.client.type(key);
    
    switch (dataType) {
      case 'string':
        const stringData = await this.client.get(key);
        if (!stringData) return null;
        return JSON.parse(stringData);
        
      case 'hash':
        const hashData = await this.client.hgetall(key);
        if (!hashData || Object.keys(hashData).length === 0) return null;
        
        return {
          userId: hashData.userId || hashData.deviceId || userId,
          lat: hashData.lat ? parseFloat(hashData.lat) : null,
          lng: hashData.lng ? parseFloat(hashData.lng) : null,
          timestamp: hashData.timestamp || null,
          receivedAt: hashData.receivedAt || null,
          updatedAt: hashData.updatedAt || null,
          metadata: hashData.metadata ? JSON.parse(hashData.metadata) : null,
          name: hashData.name || hashData.deviceName || null
        };
        
      case 'list':
        const listData = await this.client.lindex(key, -1);
        if (!listData) return null;
        return JSON.parse(listData);
        
      case 'zset':
        const zsetData = await this.client.zrevrange(key, 0, 0);
        if (!zsetData || zsetData.length === 0) return null;
        return JSON.parse(zsetData[0]);
        
      default:
        logger.warn(`‚ö†Ô∏è Tipo de dato no soportado para usuario m√≥vil ${userId}: ${dataType}`);
        return null;
    }
  }

  /**
   * Obtiene la √∫ltima posici√≥n de un usuario m√≥vil espec√≠fico
   * @param {string} userId - ID del usuario
   * @returns {Object|null} √öltima posici√≥n m√≥vil o null si no existe
   */
  async getLastPosition(userId) {
    try {
      await this.connect();
      
      const key = `${this.keyPrefix}${userId}`;
      
      // Verificar si la clave existe
      const exists = await this.client.exists(key);
      if (!exists) {
        logger.debug(`üì± No se encontr√≥ √∫ltima posici√≥n m√≥vil para usuario: ${userId}`);
        return null;
      }

      // Obtener datos seg√∫n el tipo
      const position = await this.getDataByType(key, userId);
      
      if (!position) {
        logger.debug(`üì± No se encontr√≥ √∫ltima posici√≥n m√≥vil para usuario: ${userId}`);
        return null;
      }

      logger.debug(`üì± √öltima posici√≥n m√≥vil obtenida para usuario: ${userId}`);
      
      return {
        ...position,
        userId: position.userId || userId, // Asegurar que userId est√© presente
        retrievedAt: new Date().toISOString()
      };

    } catch (error) {
      logger.error(`‚ùå Error obteniendo √∫ltima posici√≥n m√≥vil para ${userId}:`, error.message);
      throw error;
    }
  }

  /**
   * Obtiene las √∫ltimas posiciones de m√∫ltiples usuarios m√≥viles
   * @param {string[]} userIds - Array de IDs de usuarios
   * @returns {Object[]} Array de √∫ltimas posiciones m√≥viles
   */
  async getMultipleLastPositions(userIds) {
    try {
      await this.connect();
      
      const positions = [];

      // Procesar cada usuario individualmente para manejar diferentes tipos
      for (const userId of userIds) {
        try {
          const position = await this.getLastPosition(userId);
          if (position) {
            positions.push(position);
          }
        } catch (error) {
          logger.warn(`‚ö†Ô∏è Error obteniendo posici√≥n m√≥vil para ${userId}:`, error.message);
        }
      }

      logger.info(`üì± Obtenidas ${positions.length}/${userIds.length} √∫ltimas posiciones m√≥viles`);
      return positions;

    } catch (error) {
      logger.error('‚ùå Error obteniendo m√∫ltiples √∫ltimas posiciones m√≥viles:', error.message);
      throw error;
    }
  }

  /**
   * Obtiene todas las √∫ltimas posiciones m√≥viles disponibles
   * @returns {Object[]} Array de todas las √∫ltimas posiciones m√≥viles
   */
  async getAllLastPositions() {
    try {
      await this.connect();
      
      const pattern = `${this.keyPrefix}*`;
      const keys = await this.client.keys(pattern);
      
      if (keys.length === 0) {
        logger.info('üì± No se encontraron √∫ltimas posiciones m√≥viles');
        return [];
      }

      const positions = [];

      // Procesar cada clave individualmente para manejar diferentes tipos
      for (const key of keys) {
        const userId = key.replace(this.keyPrefix, '');
        
        try {
          const position = await this.getLastPosition(userId);
          if (position) {
            positions.push(position);
          }
        } catch (error) {
          logger.warn(`‚ö†Ô∏è Error obteniendo posici√≥n m√≥vil para ${userId}:`, error.message);
        }
      }

      logger.info(`üì± Obtenidas ${positions.length} √∫ltimas posiciones m√≥viles totales`);
      return positions;

    } catch (error) {
      logger.error('‚ùå Error obteniendo todas las √∫ltimas posiciones m√≥viles:', error.message);
      throw error;
    }
  }

  /**
   * Verifica si existe una √∫ltima posici√≥n para un usuario m√≥vil
   * @param {string} userId - ID del usuario
   * @returns {boolean} True si existe, false si no
   */
  async hasLastPosition(userId) {
    try {
      await this.connect();
      
      const key = `${this.keyPrefix}${userId}`;
      logger.debug(`üîç Verificando existencia de clave m√≥vil: ${key}`);
      
      const exists = await this.client.exists(key);
      logger.debug(`üì± Clave m√≥vil ${key} existe: ${exists === 1}`);
      
      // Verificaci√≥n adicional: si existe, intentar obtener el tipo
      if (exists === 1) {
        try {
          const dataType = await this.client.type(key);
          logger.debug(`üì± Tipo de dato m√≥vil para ${key}: ${dataType}`);
          
          // Verificar que el tipo sea v√°lido y tenga contenido
          switch (dataType) {
            case 'hash':
              const hashKeys = await this.client.hkeys(key);
              const hasContent = hashKeys.length > 0;
              logger.debug(`üì± Hash m√≥vil ${key} tiene ${hashKeys.length} campos`);
              return hasContent;
            case 'string':
              const stringValue = await this.client.get(key);
              const hasStringContent = stringValue !== null && stringValue !== '';
              logger.debug(`üì± String m√≥vil ${key} tiene contenido: ${hasStringContent}`);
              return hasStringContent;
            case 'list':
              const listLength = await this.client.llen(key);
              const hasListContent = listLength > 0;
              logger.debug(`üì± Lista m√≥vil ${key} tiene ${listLength} elementos`);
              return hasListContent;
            case 'zset':
              const zsetSize = await this.client.zcard(key);
              const hasZsetContent = zsetSize > 0;
              logger.debug(`üì± Sorted set m√≥vil ${key} tiene ${zsetSize} elementos`);
              return hasZsetContent;
            default:
              logger.warn(`‚ö†Ô∏è Tipo de dato desconocido para m√≥vil ${key}: ${dataType}`);
              return false;
          }
        } catch (typeError) {
          logger.warn(`‚ö†Ô∏è Error verificando tipo m√≥vil de ${key}:`, typeError.message);
          return exists === 1; // Fallback a verificaci√≥n b√°sica
        }
      }
      
      return false;

    } catch (error) {
      logger.error(`‚ùå Error verificando existencia de posici√≥n m√≥vil para ${userId}:`, error.message);
      throw error;
    }
  }

  /**
   * Obtiene estad√≠sticas de las √∫ltimas posiciones m√≥viles
   * @returns {Object} Estad√≠sticas
   */
  async getStats() {
    try {
      await this.connect();
      
      const pattern = `${this.keyPrefix}*`;
      const keys = await this.client.keys(pattern);
      
      let totalMemoryUsage = 0;
      for (const key of keys) {
        try {
          const usage = await this.client.memory('usage', key);
          totalMemoryUsage += usage || 0;
        } catch (error) {
          // Ignorar errores de memoria individual
        }
      }

      return {
        totalUsers: keys.length,
        keyPattern: pattern,
        memoryUsage: totalMemoryUsage,
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      logger.error('‚ùå Error obteniendo estad√≠sticas m√≥viles:', error.message);
      throw error;
    }
  }

  /**
   * Verifica la conexi√≥n a Redis
   */
  async ping() {
    try {
      await this.connect();
      const result = await this.client.ping();
      return result === 'PONG';
    } catch (error) {
      logger.error('‚ùå Error en ping a Redis m√≥vil:', error.message);
      return false;
    }
  }

  /**
   * Desconecta de Redis
   */
  async disconnect() {
    try {
      if (this.client && this.isConnected) {
        if (this.client.status === 'ready') {
          await this.client.quit();
        }
        this.isConnected = false;
        logger.info('‚úÖ Desconectado de Redis m√≥vil');
      }
    } catch (error) {
      if (!error.message.includes('Connection is closed')) {
        logger.error('‚ùå Error desconectando de Redis m√≥vil:', error.message);
      }
    }
  }
}